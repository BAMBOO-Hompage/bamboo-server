package SMU.BAMBOO.Hompage.mock;

import SMU.BAMBOO.Hompage.domain.mainActivites.entity.MainActivities;
import SMU.BAMBOO.Hompage.domain.mainActivites.repository.MainActivitiesRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMainActivitiesRepository implements MainActivitiesRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MainActivities> data = Collections.synchronizedList(new ArrayList<>());


    @Override
    public MainActivities save(MainActivities mainActivities) {
        if (mainActivities.getMainActivitiesId() == null || mainActivities.getMainActivitiesId() == 0) {
            MainActivities newActivity = mainActivities.toBuilder()
                    .mainActivitiesId(autoGeneratedId.incrementAndGet())
                    .build();

            data.add(newActivity);
            return newActivity;
        } else {
            deleteById(mainActivities.getMainActivitiesId());
            data.add(mainActivities);
            return mainActivities;
        }
    }

    @Override
    public Page<MainActivities> findByYear(int year, Pageable pageable) {
        List<MainActivities> filteredActivities = new ArrayList<>();
        for (MainActivities activity : data) {
            if (activity.getYear() == year) {
                filteredActivities.add(activity);
            }
        }

        int start = (int) pageable.getOffset();
        int end = Math.min((start + pageable.getPageSize()), filteredActivities.size());
        List<MainActivities> pagedActivities = filteredActivities.subList(start, end);

        return new PageImpl<>(pagedActivities, pageable, filteredActivities.size());
    }

    @Override
    public Optional<MainActivities> findById(Long id) {
        return data.stream()
                .filter(mainActivity -> mainActivity.getMainActivitiesId().equals(id))
                .findAny();
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(mainActivity -> mainActivity.getMainActivitiesId().equals(id));
    }
}
