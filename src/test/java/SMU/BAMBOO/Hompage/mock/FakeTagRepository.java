package SMU.BAMBOO.Hompage.mock;

import SMU.BAMBOO.Hompage.domain.tag.entity.Tag;
import SMU.BAMBOO.Hompage.domain.tag.repository.TagRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeTagRepository implements TagRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Tag> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<Tag> findById(Long id) {
        return data.stream()
                .filter(tag -> tag.getTagId().equals(id))
                .findAny();
    }

    @Override
    public Optional<Tag> findByName(String name) {
        return data.stream()
                .filter(tag -> tag.getName().equals(name))
                .findAny();
    }

    @Override
    public List<Tag> findAll() {
        return new ArrayList<>(data);
    }

    @Override
    public List<Tag> findByNameIn(List<String> names) {
        return null;
    }

    @Override
    public void saveAll(List<Tag> tags) {

    }

    @Override
    public Tag save(Tag tag) {
        if (tag.getTagId() == null || tag.getTagId() == 0) {
            Tag newTag = Tag.builder()
                    .tagId(autoGeneratedId.incrementAndGet())
                    .name(tag.getName())
                    .build();

            data.add(newTag);
            return newTag;
        } else {
            deleteById(tag.getTagId());
            data.add(tag);
            return tag;
        }
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(tag -> tag.getTagId().equals(id));
    }
}
